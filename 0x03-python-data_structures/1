#include "lists.h"

/**
 * reverse_listint - reverses a listint_t linked list
 * @head: the first node
 *
 * Return:  pointer to the first node of the reversed list
*/
listint_t *reverse_listint(listint_t **head)
{
	listint_t *current = NULL, *next = NULL;

	if (!head || !*head)
		return (NULL);
	current = *head;
	*head = NULL;
	while (current)
	{
		next = current->next;
		current->next = *head;
		*head = current;
		current = next;
	}
	return (*head);
}

/**
 * is_palindrome - function that checks if a singly linked list is a palindrome
 * @head: The singly linked list
 *
 * Return: 0 if it is not a palindrome, 1 if it is a palindrome
*/
int is_palindrome(listint_t **head)
{
	if (!head || !*head || !((*head)->next))
		return (1);

	listint *tmp1 = *head;
	listint *tmp2 = *head;
	listint *second_start;

	while (tmp1 && tmp2->next)
	{
		tmp1 = tmp1->next;
		tmp2 = tmp2->next->next;
	}

	second_start = reverse_listint(&tmp1);

	tmp1 = *head;
	tmp2 = second_start;
	int flag = 1;

	while (tmp2)
	{
		if (tmp1->n != tmp2->n)
		{
			flag = 0;
			break;
		}
		tmp1 = tmp1->next;
		tmp2 = tmp2->next;
	}

	reverse_listint(&second_start);

	return (flag);
}
